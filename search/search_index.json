{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Yuanyao's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"#test","title":"TEST","text":"<pre><code>def bubble_sort(items):\n        for i in range(len(items)):\n            for j in range(len(items) - 1 - i):\n                if items[j] &gt; items[j + 1]:\n                    items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>This is a note admonition</p> <p>go to this website for other types of admonitions</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Yuanyao Lin</li> <li>Reviewer: Brian Liu</li> </ul> <p>In this tutorial, we will set up a dev container for Go!</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub account and Git installed</li> <li>Docker installed </li> <li>Visual Studio Code installed.</li> </ul>"},{"location":"tutorials/go-setup/#part-1-setting-up-project-and-initializing-git","title":"Part 1: Setting up Project and initializing Git","text":"<p>First, you want to create a new directory within your computer.</p> <p>For example, this project could reside in a folder within your Desktop or anything! In this tutorial, I will name the directory <code>go-project</code>, but feel free to name it anything you need.</p> <pre><code>mkdir go-project // to create the directory\ncd go-project    // to go into the directory\n</code></pre> <p>Then we can initialize Git in this folder by using this git subcommand in our directory:</p> <pre><code>git init\n</code></pre> <p>Next, lets create a README file by using the following commands:</p> <pre><code>echo \"# Go Project\" &gt;&gt; README.md\necho \"[Tutorial](https://yuanyaolin13.github.io/comp423-course-notes/tutorials/go-setup/)\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Initial commit: added README.md\"\n</code></pre> <p>Note</p> <p>The second <code>echo</code> command will link to this tutorial!</p>"},{"location":"tutorials/go-setup/#step-2-publishing-remote-repo-on-github","title":"Step 2: Publishing Remote Repo on GitHub","text":"<p>First, you want to login into your GitHub account then create a new repo</p> <p>Next, you can go ahead and fill in the required things with:</p> <ul> <li>Repository Name: go-project</li> <li>Description: \"Hello COMP423 with Golang\"</li> <li>Visibility: Public</li> </ul> <p>Do NOT initialize the repository with a README, .gitignore, or license. And then click Create Repository.</p>"},{"location":"tutorials/go-setup/#step-3-linking-local-repo-on-github","title":"Step 3: Linking Local Repo on GitHub","text":"<p>Then, you want to add GitHub repo as a remote: </p> <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-project.git\n</code></pre> <p>Next, go ahead and make main the default branch name. </p> <p>Finally, push your local commits onto GitHub </p> <pre><code>git push --set-upstream origin main\n</code></pre> <p>Refreshing will net you your new commits on GitHub!</p>"},{"location":"tutorials/go-setup/#part-2-instructions-for-creating-a-new-dev-container-for-go","title":"Part 2: Instructions for creating a new Dev Container for Go","text":""},{"location":"tutorials/go-setup/#step-1-create-container-configuration","title":"Step 1: Create Container Configuration","text":"<p>Due to the nature of installations and varying coding environments, we want to set up a Dev Container for all of our Go needs in an isolated, aligned environment.</p> <p>Lets begin!</p> <ol> <li> <p>In VS Code, we want to open the directory we created, in this case, <code>go-project</code></p> </li> <li> <p>Then, install Dev Containers in VSCode</p> </li> <li> <p>Finally, create a <code>.devcontainer</code> directory in the root of project and then create a <code>devcontainer.json</code> file within that hidden directory like so</p> <pre><code>.devcontainer/devcontainer.json\n</code></pre> </li> </ol> <p>This JSON file allows you to define the configuration for the development configuration. Where we specify the following for the <code>devcontainer.json</code>:</p> <pre><code>{\n    \"name\": \"go-project\",\n    \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n    \"customizations\": {\n    \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\"golang.Go\"]\n    }\n    },\n    \"postCreateCommand\": \"go mod download\"\n}\n</code></pre>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2: Reopen the Project in a VSCode Dev Container","text":"<p>This will initiate everything and allow us to use our Dev Container. To do this press <code>Cmd+Shift+P</code> (or <code>Control+Shift+P</code> on Windows) or you can press the search bar on the top middle of VSCode. Then you want to type in \"Dev Containers: Reopen in Container\" to allow for the the Dev Container to be created. </p> <p>After this is done, in your terminal run: <code>go version</code> and something similar should pop up:</p> <pre><code>vscode \u279c /workspaces/go-project $ go version \ngo1.23.4 linux/arm64\n</code></pre> <p>Note</p> <p>This version is current as of Jan 2025.</p>"},{"location":"tutorials/go-setup/#step-3-creating-module-file","title":"Step 3: Creating module file","text":"<p>The next file we want to create is the <code>go.mod</code> file, this file defines the project's dependencies and is crucial to any Go project!</p> <p>We want to run the command </p> <pre><code>go mod init go-project\n</code></pre> <p>To initialize the go module within the root directory. In this case, we would run <code>go mod init go-project</code>! Having completed this, we can go ahead and move on to the next step as we do not have any particular dependencies to add.</p>"},{"location":"tutorials/go-setup/#part-3-creating-hello-comp423-in-go","title":"Part 3: Creating \"Hello COMP423\" in Go","text":"<p>First we want to create the Go file, you can achieve this by using the <code>.go</code> extension when creating a new file. For this case, my file will be named <code>main.go</code></p> <p>Next, we can use can type this up in the Go file to create our \"Hello COMP423\" program,</p> <pre><code>    package main\n    import \"fmt\"\n\n    func main() {\n        fmt.Println(\"Hello COMP423\")\n    }\n</code></pre> <p>Then we can choose two options, either we:</p> <ol> <li><code>go run &lt;file&gt;</code>   -&gt; simply runs the the program within the terminal</li> <li><code>go build &lt;file&gt;</code> -&gt; creates the executable for a Go file and binary</li> </ol> <p>What <code>go run</code> will get us: </p> <pre><code>vscode \u279c /workspaces/test $ go run main.go\n\nHello COMP423\n</code></pre> <p>What <code>go build</code> will get us: </p> <pre><code>vscode \u279c /workspaces/go-project $ go build main.go\n\nvscode \u279c /workspaces/go-project $ ls\n\ngo.mod  main  main.go\n\nvscode \u279c /workspaces/go-project $\n\nvscode \u279c /workspaces/go-project (main) $ ./main\nHello COMP423\n</code></pre>"},{"location":"tutorials/go-setup/#part-4-pushing-your-work-onto-github","title":"Part 4: Pushing your work onto GitHub","text":"<p>We have finished and now you can push your work onto GitHub!! Following these commands:</p> <pre><code>git add -A\ngit commit -m \"followed Golang tutorial and printed Hello COMP423!\"\ngit push -u origin main\n</code></pre>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations, you have built your first Go project and you have successfully set up an environment for the rest of your Go needs!!</p>"}]}